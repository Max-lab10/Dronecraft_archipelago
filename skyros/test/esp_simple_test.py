#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ESP-NOW
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—à–∏–≤–∞–µ—Ç –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç ESP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
"""

import sys
import time
import logging
import subprocess
import re
import serial
import serial.tools.list_ports
import threading
from pathlib import Path
from typing import Optional, Dict, List, Tuple
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º skyros
sys.path.insert(0, str(Path(__file__).parent.parent / "lib"))

from esp_flasher import (
    ESPDevice, detect_esp_ports, flash_esp, 
    wait_for_esp_ready, test_espnow_communication
)

# –ü—É—Ç—å –∫ ESP –ø—Ä–æ–µ–∫—Ç—É (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)
ESP_PROJECT_PATH = str(Path(__file__).parent.parent.parent / "esp")


@dataclass
class ESPTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ESP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    port: str
    success: bool
    tx_pps: float = 0.0
    rx_pps: float = 0.0
    packets_sent: int = 0
    packets_received: int = 0
    timestamp: float = 0.0


class SimpleESPTester:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ESP —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger("SimpleESPTester")
        self.master_esp: Optional[ESPDevice] = None
        self.test_results: List[ESPTestResult] = []
        self.used_ports: List[str] = []
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_duration = 30.0
        self.min_pps_threshold = 200.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PPS –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        self.test_environment = "lolin_s2_mini_test"
    
    def setup_logging(self, verbose: bool = False):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        level = logging.DEBUG if verbose else logging.INFO
        
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        console_handler.setFormatter(formatter)
        
        root_logger = logging.getLogger()
        root_logger.setLevel(level)
        root_logger.addHandler(console_handler)
        
        # –£–º–µ–Ω—å—à–∞–µ–º verbosity serial –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        logging.getLogger("serial").setLevel(logging.WARNING)
    
    def print_banner(self):
        """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞"""
        print("=" * 60)
        print("–£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢–ï–† ESP-NOW")
        print("=" * 60)
        print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:")
        print("1. –ü—Ä–æ—à–∏–≤–∞–µ—Ç master ESP —Å —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ—à–∏–≤–∫–æ–π")
        print("2. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å slave ESP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print(f"3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç ESP-NOW —Å–≤—è–∑—å (>= {self.min_pps_threshold} pps)")
        print("=" * 60)
    
    def select_port(self, available_ports: List[str], device_type: str) -> Optional[str]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ—Ä—Ç–∞"""
        if not available_ports:
            print(f"–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è {device_type}")
            return None
        
        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è {device_type}:")
        for i, port in enumerate(available_ports, 1):
            print(f"  {i}. {port}")
        
        while True:
            try:
                choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è {device_type} (1-{len(available_ports)}): ").strip()
                idx = int(choice) - 1
                if 0 <= idx < len(available_ports):
                    return available_ports[idx]
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except (ValueError, KeyboardInterrupt):
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    
    def setup_master_esp(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ—à–∏–≤–∫–∞ master ESP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("\n" + "="*50)
        print("–®–ê–ì 1: –ù–ê–°–¢–†–û–ô–ö–ê MASTER ESP")
        print("="*50)
        print("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –û–î–ù–û ESP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç master.")
        print("–≠—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã –¥—Ä—É–≥–∏–º ESP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º.")
        
        input("–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ master ESP –ø–æ–¥–∫–ª—é—á–µ–Ω...")
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
        ports = detect_esp_ports()
        master_port = self.select_port(ports, "Master ESP")
        if not master_port:
            return False
        
        # –ü—Ä–æ—à–∏–≤–∫–∞ master ESP
        print(f"\n–ü—Ä–æ—à–∏–≤–∫–∞ master ESP –Ω–∞ {master_port}...")
        flash_success, actual_port = flash_esp(master_port, self.test_environment, esp_project_path=ESP_PROJECT_PATH)
        if not flash_success:
            print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—à–∏—Ç—å master ESP")
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –ø–æ—Å–ª–µ –ø—Ä–æ—à–∏–≤–∫–∏
        if actual_port != master_port:
            print(f"–ü–æ—Ä—Ç ESP –∏–∑–º–µ–Ω–∏–ª—Å—è —Å {master_port} –Ω–∞ {actual_port} –ø–æ—Å–ª–µ –ø—Ä–æ—à–∏–≤–∫–∏")
            master_port = actual_port
        else:
            print(f"–ü–æ—Ä—Ç ESP –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ: {master_port}")
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º master –ø–æ—Ä—Ç
        self.used_ports.append(master_port)
        
        # –ñ–¥–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        print("–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ ESP...")
        time.sleep(3)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ master ESP
        self.master_esp = ESPDevice(master_port, "Master")
        if not self.master_esp.connect():
            print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ master ESP")
            return False
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ESP
        if not wait_for_esp_ready(self.master_esp, timeout=45):
            print("–û–®–ò–ë–ö–ê: Master ESP –Ω–µ —Å—Ç–∞–ª –≥–æ—Ç–æ–≤—ã–º")
            return False
        
        print("‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ master ESP –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
    
    def parse_espnow_rates(self, line: str) -> Optional[Tuple[float, float]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ ESP-NOW Rates –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "ESP-NOW Rates: TX=238.4 pps, RX=237.0 pps"
        pattern = r'ESP-NOW Rates: TX=([\d.]+) pps, RX=([\d.]+) pps'
        match = re.search(pattern, line)
        
        if match:
            tx_pps = float(match.group(1))
            rx_pps = float(match.group(2))
            return tx_pps, rx_pps
        
        return None
    
    def test_slave_esp(self, slave_port: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ slave ESP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print(f"\n–ü—Ä–æ—à–∏–≤–∫–∞ slave ESP –Ω–∞ {slave_port}...")
        
        # –ü—Ä–æ—à–∏–≤–∫–∞ slave ESP
        flash_success, actual_port = flash_esp(slave_port, self.test_environment, esp_project_path=ESP_PROJECT_PATH, exclude_ports=self.used_ports)
        if not flash_success:
            print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—à–∏—Ç—å slave ESP –Ω–∞ {slave_port}")
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –ø–æ—Å–ª–µ –ø—Ä–æ—à–∏–≤–∫–∏
        if actual_port != slave_port:
            print(f"–ü–æ—Ä—Ç ESP –∏–∑–º–µ–Ω–∏–ª—Å—è —Å {slave_port} –Ω–∞ {actual_port} –ø–æ—Å–ª–µ –ø—Ä–æ—à–∏–≤–∫–∏")
            slave_port = actual_port
        else:
            print(f"–ü–æ—Ä—Ç ESP –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ: {slave_port}")
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º slave –ø–æ—Ä—Ç
        self.used_ports.append(slave_port)
        
        # –ñ–¥–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        print("–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ ESP...")
        time.sleep(3)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ slave ESP
        slave_esp = ESPDevice(slave_port, "Slave")
        if not slave_esp.connect():
            print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ slave ESP –Ω–∞ {slave_port}")
            return False
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ESP
        if not wait_for_esp_ready(slave_esp, timeout=45):
            print("–û–®–ò–ë–ö–ê: Slave ESP –Ω–µ —Å—Ç–∞–ª –≥–æ—Ç–æ–≤—ã–º")
            slave_esp.disconnect()
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–≤—è–∑–∏
        print(f"\nüîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ESP-NOW —Å–≤—è–∑–∏...")
        print(f"–û–±–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞–∫–µ—Ç—ã, –∫–∞–∂–¥–æ–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å >= {self.min_pps_threshold} pps")
        print(f"–¶–µ–ª–µ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 250 –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: {self.test_duration} —Å–µ–∫—É–Ω–¥")
        
        success, results = test_espnow_communication(
            self.master_esp, slave_esp, 
            self.test_duration, int(self.min_pps_threshold)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        test_result = ESPTestResult(
            port=slave_port,
            success=success,
            tx_pps=results.get('slave_tx_pps', 0.0),
            rx_pps=results.get('avg_slave_rx_pps', 0.0),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ RX PPS
            packets_sent=results.get('slave_sent', 0),
            packets_received=results.get('slave_received', 0),
            timestamp=time.time()
        )
        self.test_results.append(test_result)
        
        # –û—á–∏—Å—Ç–∫–∞
        slave_esp.disconnect()
        
        # –£–¥–∞–ª—è–µ–º slave –ø–æ—Ä—Ç –∏–∑ used_ports
        if slave_port in self.used_ports:
            self.used_ports.remove(slave_port)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if success:
            print("‚úì –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è ESP-NOW —Å–≤—è–∑—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("‚úó –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å ESP-NOW —Å–≤—è–∑—å—é.")
            if not results.get('master_success', True):
                print(f"  - –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å RX master —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {results.get('avg_master_rx_pps', 0):.1f} pps")
            if not results.get('slave_success', True):
                print(f"  - –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å RX slave —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {results.get('avg_slave_rx_pps', 0):.1f} pps")
        
        print(f"  Master: {results.get('master_sent', 0)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {results.get('master_received', 0)} –ø–æ–ª—É—á–µ–Ω–æ, TX={results.get('master_tx_pps', 0):.1f} pps, RX={results.get('master_rx_pps', 0):.1f} pps (—Å—Ä–µ–¥–Ω–µ–µ={results.get('avg_master_rx_pps', 0):.1f})")
        print(f"  Slave: {results.get('slave_sent', 0)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {results.get('slave_received', 0)} –ø–æ–ª—É—á–µ–Ω–æ, TX={results.get('slave_tx_pps', 0):.1f} pps, RX={results.get('slave_rx_pps', 0):.1f} pps (—Å—Ä–µ–¥–Ω–µ–µ={results.get('avg_slave_rx_pps', 0):.1f})")
        print(f"  –í—Å–µ–≥–æ: {results.get('total_sent', 0)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {results.get('total_received', 0)} –ø–æ–ª—É—á–µ–Ω–æ")
        print(f"  –ü–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤: {results.get('packet_loss_rate', 0):.1f}%")
        
        return success
    
    def interactive_testing_loop(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö slave —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        print("\n" + "="*50)
        print("–®–ê–ì 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SLAVE ESP –£–°–¢–†–û–ô–°–¢–í")
        print("="*50)
        print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ESP —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
        print("–ö–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—à–∏—Ç–æ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
        
        device_count = 0
        
        while True:
            device_count += 1
            print(f"\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ #{device_count} ---")
            print("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ ESP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ—Ä—Ç—ã –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            ports_before = detect_esp_ports()
            
            try:
                input("–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ ESP –ø–æ–¥–∫–ª—é—á–µ–Ω (–∏–ª–∏ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)...")
            except KeyboardInterrupt:
                print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                break
            
            ports_after = detect_esp_ports()
            
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Ä—Ç—ã
            new_ports = [p for p in ports_after if p not in ports_before]
            available_ports = [p for p in new_ports if p not in self.used_ports]
            
            if not available_ports:
                print("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö ESP –ø–æ—Ä—Ç–æ–≤. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ ESP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
                print(f"–ü–æ—Ä—Ç—ã –¥–æ: {ports_before}")
                print(f"–ü–æ—Ä—Ç—ã –ø–æ—Å–ª–µ: {ports_after}")
                print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã: {self.used_ports}")
                continue
            
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ—Ä—Ç—ã: {new_ports}")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã (–∏—Å–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ): {available_ports}")
            
            slave_port = self.select_port(available_ports, f"Slave ESP #{device_count}")
            if not slave_port:
                print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                continue
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º slave —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            success = self.test_slave_esp(slave_port)
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            print(f"\n–¢–µ—Å—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ #{device_count} –∑–∞–≤–µ—Ä—à–µ–Ω.")
            try:
                continue_testing = input("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ? (y/n): ").lower().strip()
                if continue_testing not in ['y', 'yes', '']:
                    break
            except KeyboardInterrupt:
                break
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "="*60)
        print("–°–í–û–î–ö–ê –¢–ï–°–¢–û–í")
        print("="*60)
        
        if not self.test_results:
            print("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å.")
            return
        
        passed = sum(1 for r in self.test_results if r.success)
        total = len(self.test_results)
        
        print(f"–í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
        
        print("\n–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("-" * 120)
        print(f"{'–ü–æ—Ä—Ç':<15} {'–°—Ç–∞—Ç—É—Å':<8} {'TX_PPS':<10} {'RX_PPS':<10} {'–°—Ä–µ–¥–Ω–µ–µ_RX':<12} {'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ':<12} {'–ü–æ–ª—É—á–µ–Ω–æ':<12} {'–ü–æ—Ç–µ—Ä–∏%':<10}")
        print("-" * 120)
        
        for result in self.test_results:
            status = "–ü–†–û–ô–î–ï–ù" if result.success else "–ü–†–û–í–ê–õ–ï–ù"
            loss_rate = max(0, (result.packets_sent - result.packets_received) / max(result.packets_sent, 1)) * 100
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º rx_pps –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            avg_rx_pps = result.rx_pps
            print(f"{result.port:<15} {status:<8} {result.tx_pps:<10.1f} {result.rx_pps:<10.1f} {avg_rx_pps:<12.1f} "
                  f"{result.packets_sent:<12} {result.packets_received:<12} {loss_rate:<10.1f}")
        
        print("-" * 120)
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.master_esp:
            self.master_esp.disconnect()
    
    def run(self, verbose: bool = False):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.setup_logging(verbose)
        self.print_banner()
        
        try:
            # –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ master ESP
            if not self.setup_master_esp():
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å master ESP. –í—ã—Ö–æ–¥.")
                return False
            
            # –®–∞–≥ 2: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.interactive_testing_loop()
            
            # –®–∞–≥ 3: –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
            self.print_summary()
            
            return True
            
        except KeyboardInterrupt:
            print("\n\n–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return False
        except Exception as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            self.cleanup()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ESP-NOW",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã:
  python esp_simple_test.py                 # –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  python esp_simple_test.py --verbose       # –ó–∞–ø—É—Å–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  python esp_simple_test.py --duration 60   # –ó–∞–ø—É—Å–∫ 60-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        """
    )
    
    parser.add_argument(
        "--verbose", "-v", 
        action="store_true",
        help="–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    parser.add_argument(
        "--duration", 
        type=float, 
        default=30.0,
        help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)"
    )
    
    parser.add_argument(
        "--min-pps", 
        type=float, 
        default=200.0,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PPS –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 200)"
    )
    
    parser.add_argument(
        "--environment", 
        default="lolin_s2_mini_test",
        help="PlatformIO –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: lolin_s2_mini_test)"
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–µ—Ä–∞
    tester = SimpleESPTester()
    tester.test_duration = args.duration
    tester.min_pps_threshold = args.min_pps
    tester.test_environment = args.environment
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    success = tester.run(verbose=args.verbose)
    
    # –í—ã—Ö–æ–¥ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main() 